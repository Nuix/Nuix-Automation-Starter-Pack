<?xml version="1.0" encoding="UTF-8"?>
<processing-profile xmlns="http://schemas.nuix.com/2017/processing-profile" version="1" created-by="9.6.5.283">
  <id>aa01b0ef-6fe3-43fe-a460-39c98d4ff0af</id>
  <data-processing-settings>
    <create-thumbnails>false</create-thumbnails>
    <workstation-thumbnail-enabled>false</workstation-thumbnail-enabled>
    <web-thumbnail-enabled>false</web-thumbnail-enabled>
    <custom-thumbnail-enabled>false</custom-thumbnail-enabled>
    <process-text>true</process-text>
    <process-loose-file-contents>true</process-loose-file-contents>
    <process-forensic-images>true</process-forensic-images>
    <index-chars-fields>false</index-chars-fields>
    <store-binary>false</store-binary>
    <skin-tone-analysis>false</skin-tone-analysis>
    <face-detection>false</face-detection>
    <create-printed-image>false</create-printed-image>
    <imaging-profile-name>Processing Default</imaging-profile-name>
    <digests>
      <digest>MD5</digest>
    </digests>
    <max-digest-size>250000000</max-digest-size>
    <max-binary-size>250000000</max-binary-size>
    <reuse-evidence-stores>true</reuse-evidence-stores>
    <extract-named-entities-from-text>false</extract-named-entities-from-text>
    <extract-named-entities-from-properties>false</extract-named-entities-from-properties>
    <extract-named-entities-from-communications>false</extract-named-entities-from-communications>
    <extract-named-entities-from-text-stripped>false</extract-named-entities-from-text-stripped>
    <use-custom-named-entity-profile>false</use-custom-named-entity-profile>
    <process-text-summaries>false</process-text-summaries>
    <extract-shingles>false</extract-shingles>
    <calculate-audited-size>false</calculate-audited-size>
    <process-family-fields>false</process-family-fields>
    <hide-embedded-immaterial-data>false</hide-embedded-immaterial-data>
    <mime-type-settings>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_MS_CAB_COMPRESSED</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_NULLSOFT_NSIS_ARCHIVE</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>TEXT_X_COMMON_LOG</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>FILESYSTEM_UNALLOCATED_SPACE_CHUNK</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_SQLITE_DATABASE</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>FILESYSTEM_X_NTFS_USNJRNL</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_JAVA_ARCHIVE</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>TEXT_CSV</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_MS_WINDOWS_EVENT_LOG</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>IMAGE_VND_AUTOCAD_DWFX</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_MS_IIS_LOG</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_MS_WINDOWS_EVENT_LOGX</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_X_PCAPNG</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>IMAGE_VND_AUTOCAD_DWF</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>IMAGE_VND_AUTOCAD_SHP</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>IMAGE_VND_AUTOCAD_DWG</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_X_PLIST</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_DEBIAN_BINARY_PACKAGE</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>FILESYSTEM_X_NTFS_LOGFILE</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_EXE</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>SKIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>IMAGE_VND_AUTOCAD_DXF</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>FILESYSTEM_X_NTFS_MFT</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_MS_REGISTRY</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>true</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_X_RPM</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_TCPDUMP_PCAP</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>STRIP_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_MS_WINDOWS_PREFETCH</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>TEXT_TAB_SEPARATED_VALUES</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
      <mime-type-setting>
        <mime-type>APPLICATION_VND_MS_WIM</mime-type>
        <mime-type-processing-setting>
          <text-processing-mode>PROCESS_TEXT</text-processing-mode>
          <process-named-entities>true</process-named-entities>
          <process-images>true</process-images>
          <process-embedded>false</process-embedded>
          <store-binary>true</store-binary>
        </mime-type-processing-setting>
      </mime-type-setting>
    </mime-type-settings>
    <calculate-processing-size>false</calculate-processing-size>
    <worker-script-settings><![CDATA[{"scriptList":[{"language":"ruby","script":"require \u0027benchmark\u0027\nrequire \u0027date\u0027\nrequire \u0027java\u0027\nrequire \u0027json\u0027\nrequire \u0027net/http\u0027\nrequire \u0027pathname\u0027\nrequire \u0027securerandom\u0027\nrequire \u0027time\u0027\nrequire \u0027uri\u0027\n\n\n$logger\u003dJava::OrgApacheLog4j::Logger.getRootLogger()\n\n$nlpClient\u003dnil\n\nclass NLP\n\n\tdef addMetadata(fieldName, value, type, mode)\n\t\tif(@cfg[\u0027apply_results_to_custom_metadata\u0027]\u003d\u003dtrue)\n\t\t\tfieldName\u003dfieldName.to_s.strip()\n\t\t\tif(fieldName.length \u003e 0)\n\t\t\t\t@worker_item.addCustomMetadata(fieldName.to_s.strip(), value, type, mode)\n\t\t\tend\n\t\tend\n\t\t\n\t\tif(@cfg[\u0027apply_results_to_properties\u0027]\u003d\u003dtrue)\n\t\t\tfieldName\u003dfieldName.to_s.strip()\n\t\t\tif(fieldName.length \u003e 0)\n\t\t\t\t@item_properties[fieldName.to_s.strip()] \u003d value\n\t\t\tend\n\t\tend\n\tend\n\n\tdef addNamedEntity(name,value)\n\t\tif(@cfg[\u0027apply_named_entities\u0027]\u003d\u003dtrue)\n\t\t\t@worker_item.addNamedEntity(@worker_item.createEntity(name.strip().gsub(/\\s/,\u0027-\u0027), value.strip()))\n\t\tend\n\tend\n\t\n\tdef addTag(value)\n\t\tif(@cfg[\u0027apply_tags\u0027]\u003d\u003dtrue)\n\t\t\tvalue\u003dvalue.to_s.strip()\n\t\t\tif(value.length \u003e 0)\n\t\t\t\t@worker_item.addTag(value.strip())\n\t\t\tend\n\t\tend\n\tend\n\n\tdef applyAnnotations()\n\t\tif(!(@searchResult.has_key? \"annotationSet\"))\n\t\t\traise StandardError.new \"No annotationSet detected\"\n\t\tend\n\t\tannotationSet \u003d @searchResult[\"annotationSet\"]\n\t\tif annotationSet !\u003d nil \u0026\u0026 annotationSet.size \u003e 0\n\t\t\t$logger.debug(\"Annotation Set: #{annotationSet.size} (PARTIALLY IMPLEMENTED)\\n\" + annotationSet.to_json)\n\t\t\tindex \u003d 0\n\t\t\tannotationSet.each do | annotation |\n\t\t\t\tindex \u003d index + 1\n\n\t\t\t\tif !annotation[0].nil?\n\t\t\t\t\tannotationType \u003d annotation[0]\n\t\t\t\t\tif !annotationType.nil? \u0026\u0026 annotationType \u003d\u003d \"Named Entities\"\n\t\t\t\t\t\t$logger.debug(\"List of Named Entities: #{annotation[1]}\")\n\t\t\t\t\t\tannotation[1].each do | entity |\n\t\t\t\t\t\t\tif(entity.has_key? \u0027text\u0027)\n\t\t\t\t\t\t\t\tif(entity[\u0027text\u0027].to_s.strip().length \u003e 0)\n\t\t\t\t\t\t\t\t\taddNamedEntity(\"NLP-\" + entity[\"source\"],entity[\"text\"])\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\n\t\t\t\t\tif !annotationType.nil? \u0026\u0026 annotationType \u003d\u003d \"Compound Lexemes\"\n\t\t\t\t\t\t$logger.debug(\"FOUND COMPOUND LEXEMES !!! - #{annotation[1]}\")\n\t\t\t\t\t\tannotation[1].each do | entity |\n\t\t\t\t\t\t\tif(entity.has_key? \u0027text\u0027)\n\t\t\t\t\t\t\t\tif(entity[\u0027text\u0027].to_s.strip().length \u003e 0)\n\t\t\t\t\t\t\t\t\taddNamedEntity(\"CL-NLP-\" + entity[\"source\"],entity[\"text\"])\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\tdef applyDictionaries()\n\t\tif(!(@searchResult.has_key? \"dictionaryProximities\"))\n\t\t\traise StandardError.new \"No dictionaryProximities detected\"\n\t\tend\n\t\tmostRelevant\u003d{\n\t\t\t\"value\"\u003d\u003e-1,\n\t\t\t\"text\"\u003d\u003e\"\"\n\t\t}\n\t\tdictionaryProximities \u003d @searchResult[\"dictionaryProximities\"]\n\t\tidx \u003d 0\n\t\tif dictionaryProximities !\u003d nil \u0026\u0026 dictionaryProximities.size \u003e 0\n\t\t\t$logger.debug(\"Dictionary Proximities: #{dictionaryProximities.size}\")\n\t\t\tdictionaryProximities.each do | proximity |\n\t\t\t\ttopicDictionaryName \u003d proximity[\"topicDictionaryName\"]\n\t\t\t\taddTag(\"Gracie|Dictionary|#{topicDictionaryName}\")\n\t\t\t\tproximityValue \u003d proximity[\"proximity\"]\n\t\t\t\taddMetadata(\"gracie-dictionary-#{topicDictionaryName.downcase}-proximity\", proximityValue, \"float\", \"user\")\n\t\t\t\ttags \u003d proximity[\"tags\"]\n\t\t\t\tif tags !\u003d nil \u0026\u0026 tags.size \u003e 0 \u0026\u0026 tags[0] !\u003d nil \u0026\u0026 tags[0][\"key\"] !\u003d nil \u0026\u0026 tags[0][\"value\"] !\u003d nil\n\t\t\t\t\tkey \u003d tags[0][\"key\"]\n\t\t\t\t\tvalue \u003d tags[0][\"value\"][0]\n\t\t\t\t\taddMetadata(\"gracie-dictionary-#{topicDictionaryName.downcase}-#{key.downcase}\", value, \"float\", \"user\")\n\t\t\t\tend\n\t\t\t\ttopicTypeProximities \u003d proximity[\"topicTypeProximities\"]\n\t\t\t\tif topicTypeProximities !\u003d nil \u0026\u0026 topicTypeProximities.size \u003e 0\n\t\t\t\t\ttopicTypeProximities.each do | topic |\n\t\t\t\t\t\ttopicTypeName \u003d topic[\"topicTypeName\"]\n\t\t\t\t\t\ttopicTypeProximity \u003d topic[\"proximity\"]\n\t\t\t\t\t\taddTag(\"Gracie|Dictionary|#{topicDictionaryName}|#{topicTypeName}\")\n\t\t\t\t\t\taddMetadata(\"gracie-dictionary-#{topicDictionaryName.downcase}-#{topicTypeName.downcase}-proximity\", topicTypeProximity, \"float\", \"user\")\n\t\t\t\t\t\ttopicTypeTags \u003d topic[\"tags\"]\n\t\t\t\t\t\tif !topicTypeTags.nil?\n\t\t\t\t\t\t\ttopicTypeTags.each do | topicTypeTag |\n\t\t\t\t\t\t\t\tkey \u003d topicTypeTag[\"key\"]\n\t\t\t\t\t\t\t\tvalue \u003d topicTypeTag[\"value\"].max\n\t\t\t\t\t\t\t\tif(mostRelevant[\u0027value\u0027] \u003c value)\n\t\t\t\t\t\t\t\t\tmostRelevant[\u0027value\u0027]\u003dvalue\n\t\t\t\t\t\t\t\t\tmostRelevant[\u0027text\u0027]\u003dkey\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tif !value.nil?\n\t\t\t\t\t\t\t\t\taddMetadata(\"gracie-dictionary-#{topicDictionaryName.downcase}-#{topicTypeName.downcase}-#{key.downcase}\", value, \"float\", \"user\")\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\taddMetadata(\"gracie-dictionary-max-relevance\", mostRelevant[\u0027text\u0027], \"text\", \"user\")\n\t\tend\n\tend\n\t\n\tdef applyDocumentVectors()\n\t\tif(!(@searchResult.has_key? \"documentVector\"))\n\t\t\traise StandardError.new \"No documentVector detected\"\n\t\tend\n\t\tdocumentVector \u003d @searchResult[\"documentVector\"]\n\t\tif documentVector !\u003d nil \u0026\u0026 documentVector.size \u003e 0\n\t\t\t$logger.debug(\"Document Vector: #{documentVector.size} (NOT YET IMPLEMENTED)\")\n\t\tend\n\tend\n\t\n\tdef applyGeos()\n\t\tif(!(@searchResult.has_key? \"geoEntities\"))\n\t\t\traise StandardError.new \"No geoEntities detected\"\n\t\tend\n\t\tgeoEntities \u003d @searchResult[\"geoEntities\"]\n\t\tif geoEntities !\u003d nil \u0026\u0026 geoEntities.size \u003e 0\n\t\t\t$logger.debug(\"Geo Entities: #{geoEntities.size}\")\n\t\t\tgeoEntities.each do | entity | # There\u0027s much more in here, just grabbing a bit to show it off\n\t\t\t\tif(entity.has_key? \"mainName\")\n\t\t\t\t\tmainName \u003d entity[\"mainName\"].to_s\n\t\t\t\t\tkeyName \u003d mainName.downcase.strip().gsub(/\\s/,\u0027-\u0027)\n\t\t\t\t\tif(keyName.length \u003e 0)\n\t\t\t\t\t\tif(entity.has_key? \"weblink\")\n\t\t\t\t\t\t\tweblink \u003d entity[\"weblink\"].to_s.strip()\n\t\t\t\t\t\t\tif(weblink.length \u003e 0)\n\t\t\t\t\t\t\t\taddMetadata(\"gracie-geo-#{keyName}-weblink\", weblink, \"text\", \"user\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tend\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entity.has_key? \"relevance\")\n\t\t\t\t\t\t\trelevance \u003d entity[\"relevance\"].to_s.strip()\n\t\t\t\t\t\t\tif(relevance.length \u003e 0)\n\t\t\t\t\t\t\t\taddMetadata(\"gracie-geo-#{keyName}-relevance\", relevance, \"float\", \"user\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(entity.has_key? \"location\")\n\t\t\t\t\t\t\tif(entity[\u0027location\u0027].has_key? \"lat\")\n\t\t\t\t\t\t\t\tif(entity[\u0027location\u0027].has_key? \"lon\")\n\t\t\t\t\t\t\t\t\tlatitude \u003d entity[\"location\"][\"lat\"]\n\t\t\t\t\t\t\t\t\tlongitude \u003d entity[\"location\"][\"lon\"]\n\t\t\t\t\t\t\t\t\taddMetadata(\"gracie-geo-#{keyName}-latitude\", latitude, \"float\", \"user\")\n\t\t\t\t\t\t\t\t\taddMetadata(\"gracie-geo-#{keyName}-longitude\", longitude, \"float\", \"user\")\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tdef applyImageProcessing()\n\t\tif(!(@searchResult.has_key? \"imageProcessing\"))\n\t\t\traise StandardError.new \"No imageProcessing detected\"\n\t\tend\n\t\timageProcessing \u003d @searchResult[\"imageProcessing\"]\n\t\tif imageProcessing !\u003d nil \u0026\u0026 imageProcessing.size \u003e 0\n\t\t\t$logger.debug(\"Image Processing: #{imageProcessing.size} (NOT YET IMPLEMENTED)\\n\" + imageProcessing.to_json)\n\t\tend\n\tend\n\t\n\tdef applyLanguage()\n\t\tif(!(@searchResult.has_key? \"language\"))\n\t\t\traise StandardError.new \"No Language detected\"\n\t\tend\n\t\taddMetadata(\"gracie-language-name\", @searchResult[\"language\"][\"name\"], \"text\", \"user\")\n\t\taddMetadata(\"gracie-language-code\", @searchResult[\"language\"][\"code\"], \"text\", \"user\")\n\t\taddMetadata(\"gracie-language-tag\", @searchResult[\"language\"][\"tag\"], \"text\", \"user\")\n\t\t$logger.debug(\"Language identified by Gracie is [name\u003d#{@searchResult[\"language\"][\"name\"]},code\u003d#{@searchResult[\"language\"][\"code\"]},tag\u003d#{@searchResult[\"language\"][\"tag\"]}]\")\n\tend\n\t\n\tdef applyLogging()\n\t\tif(!(@searchResult.has_key? \"logging\"))\n\t\t\traise StandardError.new \"No logging detected\"\n\t\tend\n\t\tlogging \u003d @searchResult[\"logging\"]\n\t\tif logging !\u003d nil \u0026\u0026 logging.size \u003e 0\n\t\t\t$logger.debug(\"Logging: #{logging.size} (NOT YET IMPLEMENTED)\")\n\t\tend\n\tend\n\t\n\tdef applyPersons()\n\t\tif(!(@searchResult.has_key? \"personNames\"))\n\t\t\traise StandardError.new \"No personNames detected\"\n\t\tend\n\t\tpersonNames \u003d @searchResult[\"personNames\"]\n\t\tif personNames !\u003d nil \u0026\u0026 personNames.size \u003e 0\n\t\t\t$logger.debug(\"Person Names: #{personNames.size} (NOT YET IMPLEMENTED)\\n\" + personNames.to_json)\n\t\tend\n\tend\n\t\n\tdef applyProfiles()\n\t\tif(!(@searchResult.has_key? \"profileResults\"))\n\t\t\traise StandardError.new \"No profileResults detected\"\n\t\tend\n\t\tprofileResults \u003d @searchResult[\"profileResults\"]\n\t\tif profileResults !\u003d nil \u0026\u0026 profileResults.size \u003e 0\n\t\t\t$logger.debug(\"Profile Results: #{profileResults.size} (NOT YET IMPLEMENTED)\")\n\t\tend\n\tend\n\t\n\tdef applyRisks()\n\t\tif(!(@searchResult.has_key? \"riskValues\"))\n\t\t\traise StandardError.new \"No riskValues detected\"\n\t\tend\n\t\tmostRelevant\u003d{\n\t\t\t\"value\"\u003d\u003e-1,\n\t\t\t\"text\"\u003d\u003e\"\"\n\t\t}\n\t\triskValues \u003d @searchResult[\"riskValues\"]\n\t\tif riskValues !\u003d nil \u0026\u0026 riskValues.size \u003e 0\n\t\t\t$logger.debug(\"Risk Values: #{riskValues.size} (PARTIALLY IMPLEMENTED)\\n\" + riskValues.to_json)\n\t\t\tclassifierRisk \u003d riskValues[\"classifierRisk\"]\n\t\t\t$logger.trace(\"CLASSIFIER RISK #{classifierRisk}\")\n\t\t\tif !classifierRisk.nil?\n\t\t\t\tdictionaryRisk \u003d classifierRisk[\"DictionaryRisk\"]\n\t\t\t\tif !dictionaryRisk.nil?\n\t\t\t\t\tdictionaryRisk.each do | risk |\n\t\t\t\t\t\tclassifierGroup \u003d risk[\"classifierGroup\"]\n\t\t\t\t\t\tif !classifierGroup.nil?\n\t\t\t\t\t\t\tclassifierGroup \u003d classifierGroup.downcase.gsub(/\\s/,\u0027-\u0027)\n\t\t\t\t\t\tend\n\t\t\t\t\t\tclassifierName \u003d risk[\"classifierName\"]\n\t\t\t\t\t\tif !classifierName.nil?\n\t\t\t\t\t\t\tclassifierName \u003d classifierName.downcase.gsub(/\\s/,\u0027-\u0027)\n\t\t\t\t\t\tend\n\t\t\t\t\t\triskValue \u003d risk[\"riskValue\"]\n\t\t\t\t\t\trelevanceValue \u003d risk[\"relevanceValue\"]\n\n\t\t\t\t\t\tif(mostRelevant[\u0027value\u0027] \u003c riskValue)\n\t\t\t\t\t\t\tmostRelevant[\u0027value\u0027]\u003driskValue\n\t\t\t\t\t\t\tmostRelevant[\u0027text\u0027]\u003d\"#{classifierGroup}-#{classifierName}\"\n\t\t\t\t\t\tend\n\t\t\t\t\t\taddMetadata(\"gracie-classifier-dictionary-#{classifierGroup}-#{classifierName}-risk\", riskValue, \"float\", \"user\")\n\t\t\t\t\t\taddMetadata(\"gracie-classifier-dictionary-#{classifierGroup}-#{classifierName}-relevance\", relevanceValue, \"float\", \"user\")\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\taddMetadata(\"gracie-classifier-dictionary-max-risk\", mostRelevant[\u0027text\u0027], \"text\", \"user\")\n\n\t\t\tentityRisk \u003d riskValues[\"entityRisk\"] #todo: implement once sample data that populates this is identified\n\n\t\t\tsummaryRisk \u003d riskValues[\"summaryRisk\"]\n\t\t\t$logger.debug(\"SUMMARY RISK #{summaryRisk}\")\n\t\t\tif !summaryRisk.nil?\n\t\t\t\tif !summaryRisk[\"AvgClassifierRisk\"].nil?\n\t\t\t\t\taddMetadata(\"gracie-avg-classifier-risk\", summaryRisk[\"AvgClassifierRisk\"], \"float\", \"user\")\n\t\t\t\tend \n\t\t\t\tif !summaryRisk[\"MaxRisk\"].nil?\n\t\t\t\t\taddMetadata(\"gracie-max-risk\", summaryRisk[\"MaxRisk\"], \"float\", \"user\")\n\t\t\t\tend\n\t\t\t\tif !summaryRisk[\"MaxClassifierRisk\"].nil?\n\t\t\t\t\taddMetadata(\"gracie-max-classifier-risk\", summaryRisk[\"MaxClassifierRisk\"], \"float\", \"user\")\n\t\t\t\tend\n\t\t\t\tif !summaryRisk[\"TotalClassifierRisk\"].nil?\n\t\t\t\t\taddMetadata(\"gracie-total-classifier-risk\", summaryRisk[\"TotalClassifierRisk\"], \"float\", \"user\")\n\t\t\t\tend\n\t\t\t\tif !summaryRisk[\"DictionaryRisk\"].nil?\n\t\t\t\t\taddMetadata(\"gracie-dictionary-risk\", summaryRisk[\"DictionaryRisk\"], \"float\", \"user\")\n\t\t\t\tend\n\t\t\t\tif !summaryRisk[\"AverageRisk\"].nil?\n\t\t\t\t\taddMetadata(\"gracie-average-risk\", summaryRisk[\"AverageRisk\"], \"float\", \"user\")\n\t\t\t\tend\n\t\t\t\tif !summaryRisk[\"TotalRisk\"].nil?\n\t\t\t\t\taddMetadata(\"gracie-total-risk\", summaryRisk[\"TotalRisk\"], \"float\", \"user\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tdef applySentiment()\n\t\tif(!(@searchResult.has_key? \"sentimentIndex\"))\n\t\t\traise StandardError.new \"No sentimentIndex detected\"\n\t\tend\n\t\taddMetadata(\"gracie-sentiment-index\", @searchResult[\"sentimentIndex\"], \"float\", \"user\")\n\t\t$logger.debug(\"Gracie Sentiment Index: #{@searchResult[\"sentimentIndex\"]}\")\n\tend\n\t\n\tdef applySkillSets()\n\t\tif(!(@searchResult.has_key? \"skillsetProximities\"))\n\t\t\traise StandardError.new \"No skillsetProximities detected\"\n\t\tend\n\t\tmostRelevant\u003d{\n\t\t\t\"value\"\u003d\u003e-1,\n\t\t\t\"text\"\u003d\u003e\"\"\n\t\t}\n\t\tskillsetProximities \u003d @searchResult[\"skillsetProximities\"]\n\t\tif skillsetProximities !\u003d nil \u0026\u0026 skillsetProximities.size \u003e 0\n\t\t\t$logger.debug(\"Skillset Proximities: #{skillsetProximities.size}\")\n\t\t\tskillsetProximities.each do | skillset |\n\t\t\t\tskillsetName \u003d skillset[\"skillsetName\"]\n\t\t\t\tskills \u003d skillset[\"skills\"]\n\t\t\t\tskills.each do | skill |\n\t\t\t\t\tskillName \u003d skill[\"skillName\"]\n\t\t\t\t\ttopicTypeTags \u003d skill[\"tags\"]\n\t\t\t\t\tconfidenceScore \u003d skill[\"confidence\"]\n\t\t\t\t\taddMetadata(\"gracie-skillset-#{skillsetName.downcase}-#{skillName.downcase}-confidence\", confidenceScore, \"float\", \"user\")\n\t\t\t\t\tif !topicTypeTags.nil?\n\t\t\t\t\t\ttopicTypeTags.each do | topicTypeTag |\n\t\t\t\t\t\t\tkey \u003d topicTypeTag[\"key\"]\n\t\t\t\t\t\t\tvalue \u003d topicTypeTag[\"value\"].max\n\t\t\t\t\t\t\tif !value.nil?\n\t\t\t\t\t\t\t\taddMetadata(\"gracie-skillset-#{skillsetName.downcase}-#{skillName.downcase}-#{key.downcase}\", value, \"float\", \"user\")\n\t\t\t\t\t\t\t\taddTag(\"Gracie|Skillset|#{skillsetName}|#{skillName}\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\taddMetadata(\"gracie-skillset-max-relevance\", mostRelevant[\u0027text\u0027], \"text\", \"user\")\n\t\tend\n\tend\n\t\n\tdef applyTopics()\n\t\tif(!(@searchResult.has_key? \"topicEntities\"))\n\t\t\traise StandardError.new \"No topicEntities detected\"\n\t\tend\n\t\tmostRelevant\u003d{\n\t\t\t\"value\"\u003d\u003e-1,\n\t\t\t\"text\"\u003d\u003e\"\"\n\t\t}\n\t\ttopicEntities \u003d @searchResult[\"topicEntities\"]\n\t\tif topicEntities !\u003d nil \u0026\u0026 topicEntities.size \u003e 0\n\t\t\t$logger.debug(\"Topic Entities: #{topicEntities.size}\")\n\t\t\ttopicEntities.each do | topic |\n\t\t\t\tif(topic.has_key? \"dictionaryName\")\n\t\t\t\t\tdictionaryName \u003d topic[\"dictionaryName\"]\n\t\t\t\t\tdictionaryKey \u003d dictionaryName.to_s.downcase.strip().gsub(/\\s/,\u0027-\u0027)\n\t\t\t\t\tif(topic.has_key? \"relevance\")\n\t\t\t\t\t\trelevance \u003d topic[\"relevance\"]\n\t\t\t\t\t\tif(topic.has_key? \"type\")\n\t\t\t\t\t\t\ttype \u003d topic[\"type\"]\n\t\t\t\t\t\t\ttypeKey \u003d type.to_s.downcase.strip().gsub(/\\s/,\u0027-\u0027)\n\t\t\t\t\t\t\tif(topic.has_key? \"mainName\")\n\t\t\t\t\t\t\t\tmainName \u003d topic[\"mainName\"]\n\t\t\t\t\t\t\t\tkeyName \u003d mainName.to_s.downcase.strip().gsub(/\\s/,\u0027-\u0027)\n\t\t\t\t\t\t\t\tif(mostRelevant[\u0027value\u0027] \u003c relevance)\n\t\t\t\t\t\t\t\t\tmostRelevant[\u0027value\u0027]\u003drelevance\n\t\t\t\t\t\t\t\t\tmostRelevant[\u0027text\u0027]\u003d\"#{dictionaryKey}-#{typeKey}-#{keyName}\"\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\taddMetadata(\"gracie-topic-#{dictionaryKey}-#{typeKey}-#{keyName}-relevance\", relevance, \"float\", \"user\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\taddMetadata(\"gracie-topic-max-relevance\", mostRelevant[\u0027text\u0027], \"text\", \"user\")\n\tend\n\t\n\tdef applyWarnings()\n\t\tif(!(@searchResult.has_key? \"warnings\"))\n\t\t\traise StandardError.new \"No warnings detected\"\n\t\tend\n\t\twarnings \u003d @searchResult[\"warnings\"]\n\t\tif warnings !\u003d nil \u0026\u0026 warnings.size \u003e 0\n\t\t\t$logger.debug(\"Warnings: #{warnings.size} (NOT YET IMPLEMENTED)\")\n\t\tend\n\tend\n\t\n\tdef applyWorkerItem(worker_item)\n\t\t@worker_item\u003dworker_item\n\t\t@item_properties \u003d worker_item.getSourceItem().getProperties()\n\t\t@searchResult\u003dnil\n\tend\n\t\n\tdef cleanUp()\n\t\treturn post(\"#{@cfg[\"feed_service\"]}/projects/delete?id\u003d#{@cfg[\"gracie_project_id\"]}\", @cfg[\"headers\"], \"\")\n\tend\n\t\n\tdef createTask(item_text)\n\t\ttask\u003d post(\"#{@cfg[\"feed_service\"]}/process-text-tasks/submit?projectId\u003d#{@cfg[\"gracie_project_id\"]}\", @cfg[\"headers\"], item_text)\n\t\tif(task.nil?) # had a few oddities coming back... testing for different scenarios for debug purposes.\n\t\t\traise StandardError.new \"#1 Can\u0027t connect to Gracie\"\n\t\tend\n\t\tif(!(task.has_key? \"response\"))\n\t\t\traise StandardError.new \"#2 Can\u0027t connect to Gracie\"\n\t\tend\n\t\tif(task[\"response\"].nil?)\n\t\t\traise StandardError.new \"#3 Can\u0027t connect to Gracie\"\n\t\tend\n\t\tif(!(task[\"response\"].has_key? \u0027id\u0027))\n\t\t\traise StandardError.new \"#4 Can\u0027t connect to Gracie\"\n\t\tend\n\t\tif(task[\"response\"][\u0027id\u0027].nil?)\n\t\t\traise StandardError.new \"#5 Can\u0027t connect to Gracie\"\n\t\tend\n\t\treturn task[\"response\"][\"id\"]\n\tend\n\t\n\tdef focusOnResult(seSearchResult)\n\t\t@searchResult\u003dseSearchResult\n\t\t\n\t\t@cfg[\u0027apply\u0027].each do | methodName |\n\t\t\t@applyLookup[methodName].call()\n\t\tend\n\t\t@worker_item.set_item_properties @item_properties\n\tend\n\t\n\tdef getTaskStatus(task_id)\n\t\treturn post(\"#{@cfg[\"feed_service\"]}/tasks/retrieve?id\u003d#{task_id}\", @cfg[\"headers\"], \"\")\n\tend\n\t\n\tdef getToken(base_url)\n\t\turi \u003d URI.parse(\"#{base_url}/sso/oauth/token\")\n\t\thttps \u003d Net::HTTP.new(uri.host, uri.port)\n\t\thttps.verify_mode \u003d OpenSSL::SSL::VERIFY_NONE\n\t\thttps.use_ssl\u003dtrue\n\t\theaders \u003d {\"Content-Type\" \u003d\u003e \"Content-Type: multipart/form-data\", \"Authorization\" \u003d\u003e \"Basic #{@cfg[\"authorization\"]}\"}\n\t\tbegin\n\t\t\trequest \u003d Net::HTTP::Post.new(uri.request_uri, headers)\n\t\t\trequest.set_form_data(\"grant_type\" \u003d\u003e \"#{@cfg[\"grant_type\"]}\",\"Gracie_id\" \u003d\u003e \"#{@cfg[\"Gracie_id\"]}\",\"Gracie_secret\" \u003d\u003e \"#{@cfg[\"Gracie_secret\"]}\",\"username\" \u003d\u003e \"#{@cfg[\"username\"]}\",\"password\" \u003d\u003e \"#{@cfg[\"password\"]}\")\n\t\t\tresponse \u003d https.request(request)\n\t\t\t$logger.trace(\"Call to #{uri} returned #{response.code}.\")\n\t\t\tif response.body !\u003d nil\n\t\t\t\tbegin\n\t\t\t\t\treturn JSON.parse(response.body)\n\t\t\t\trescue\n\t\t\t\t\t$logger.warn(\"Unable to parse response from translation service or it\u0027s blank.\")\n\t\t\t\tend\n\t\t\tend\n\t\trescue \u003d\u003e ex\n\t\t\t$logger.warn(ex.message)\n\t\t\t$logger.warn(ex.backtrace.to_s)\n\t\tend\n\tend\n\t\n\tdef initialize(cfg)\n\t\t@available\u003dfalse\n\t\t@cfg\u003dcfg\n\t\tif(!(@cfg.has_key? \u0027apply_named_entities\u0027))\n\t\t\t@cfg[\u0027apply_named_entities\u0027]\u003dtrue\n\t\tend\n\t\tif(!(@cfg.has_key? \u0027apply_results_to_custom_metadata\u0027))\n\t\t\t@cfg[\u0027apply_results_to_custom_metadata\u0027]\u003dtrue\n\t\tend\n\t\tif(!(@cfg.has_key? \u0027apply_results_to_properties\u0027))\n\t\t\t@cfg[\u0027apply_results_to_properties\u0027]\u003dtrue\n\t\tend\n\t\tif(!(@cfg.has_key? \u0027apply_tags\u0027))\n\t\t\t@cfg[\u0027apply_tags\u0027]\u003dtrue\n\t\tend\n\t\t\n\t\trequiredOptions\u003d[@cfg[\u0027apply_tags\u0027],@cfg[\u0027apply_results_to_properties\u0027],@cfg[\u0027apply_results_to_custom_metadata\u0027],@cfg[\u0027apply_named_entities\u0027]]\n\t\tif(requiredOptions.select{|val|val\u003d\u003dtrue}.length \u003d\u003d 0)\n\t\t\t$logger.warn(\"NLP was requested without anything to action?\")\n\t\t\t$logger.warn(@cfg.to_json)\n\t\t\treturn\n\t\tend\n\n\t\t\n\t\tbegin\n\t\t\tgracie_uri \u003d URI::parse(@cfg[\"feed_service\"])\n\t\t\ttoken \u003d getToken(\"#{gracie_uri.scheme}://#{gracie_uri.host}\")\n\t\t\taccess_token \u003d token[\"access_token\"]\n\t\t\t@cfg[\"gracie_access_token\"] \u003d access_token\n\t\t\ttoken_type \u003d token[\"token_type\"]\n\t\t\trefresh_token \u003d token[\"refresh_token\"]\n\t\t\texpires_in \u003d token[\"expires_in\"]\n\t\t\tscope \u003d token[\"scope\"]\n\t\t\t$logger.info(\"Acquired Gracie token [access_token\u003d#{access_token},token_type\u003d#{token_type},refresh_token\u003d#{refresh_token},expires_in\u003d#{expires_in},scope\u003d#{scope}]\")\n\t\t\t@cfg[\"headers\"] \u003d {\"Content-Type\" \u003d\u003e \"plain/text;charset\u003dUTF-8\", \"authorization\" \u003d\u003e \"Bearer #{access_token}\"}\n\t\t\t$logger.debug(\"Configuration:\\n\" + @cfg.to_json)\n\t\t\tinfo \u003d post(\"#{@cfg[\"dictionary_service\"]}/info/retrieve\", @cfg[\"headers\"], \"\")\n\t\t\tstatus \u003d info[\"status\"]\n\t\t\tmessage \u003d info[\"message\"]\n\t\t\tcode \u003d info[\"code\"]\n\t\t\tresponse \u003d info[\"response\"]\n\t\t\tserver \u003d response[\"server\"]\n\t\t\tsysteminfo \u003d response[\"system\"]\n\t\t\tsearch \u003d response[\"search\"]\n\n\t\t\t$logger.info(\"Gracie Server Info: #{server}\")\n\t\t\t$logger.info(\"Gracie System Info: #{systeminfo}\")\n\t\t\t$logger.info(\"Gracie Search Info: #{search}\")\n\n\t\t\tproject \u003d post(\"#{@cfg[\"feed_service\"]}/projects/add?name\u003dnuix-#{SecureRandom.uuid}\", @cfg[\"headers\"], \"\")\n\t\t\n\t\t\t$logger.debug(\"Project Creation Response: #{project}\")\n\t\t\tproject_id \u003d project[\"response\"][\"id\"]\n\t\t\tproject_name \u003d project[\"response\"][\"name\"]\n\t\t\tes_index \u003d project[\"response\"][\"elasticsearchIndexName\"]\n\n\t\t\t$logger.info(\"Gracie Project #{project_name} (ID:#{project_id}) created.\")\n\t\t\t@cfg[\"gracie_project_name\"] \u003d project_name\n\t\t\t@cfg[\"gracie_project_id\"] \u003d project_id\n\t\t\t\n\t\t\t@applyLookup\u003d{\n\t\t\t\t\"annotations\"\u003d\u003emethod(:applyAnnotations),\n\t\t\t\t\"dictionaries\"\u003d\u003emethod(:applyDictionaries),\n\t\t\t\t\"documentvectors\"\u003d\u003emethod(:applyDocumentVectors),\n\t\t\t\t\"geos\"\u003d\u003emethod(:applyGeos),\n\t\t\t\t\"imageprocessing\"\u003d\u003emethod(:applyImageProcessing),\n\t\t\t\t\"languages\"\u003d\u003emethod(:applyLanguage),\n\t\t\t\t\"logging\"\u003d\u003emethod(:applyLogging),\n\t\t\t\t\"persons\"\u003d\u003emethod(:applyPersons),\n\t\t\t\t\"profiles\"\u003d\u003emethod(:applyProfiles),\n\t\t\t\t\"risks\"\u003d\u003emethod(:applyRisks),\n\t\t\t\t\"sentiments\"\u003d\u003emethod(:applySentiment),\n\t\t\t\t\"skillSets\"\u003d\u003emethod(:applySkillSets),\n\t\t\t\t\"topics\"\u003d\u003emethod(:applyTopics)\n\t\t\t}\n\t\t\t\n\t\t\tif(@cfg[\u0027apply\u0027].nil?)\n\t\t\t\t@cfg[\u0027apply\u0027]\u003d@applyLookup.keys #all!\n\t\t\telse\n\t\t\t\t#only retain valid values\n\t\t\t\t@cfg[\u0027apply\u0027]\u003d@cfg[\u0027apply\u0027].map{|val|val.downcase}.select{|val|@applyLookup.keys.include? val}\n\t\t\tend\n\t\t\t$logger.info(\"Applying layers:\\t\" + @cfg[\u0027apply\u0027].join(\";\"))\n\t\t\t\n\t\t\t@available\u003dtrue\n\t\trescue \u003d\u003e ex\n\t\t\t$logger.warn(ex.message)\n\t\t\t$logger.warn(ex.backtrace.to_s)\n\t\t\t$logger.warn(@cfg.to_json)\n\t\tend\n\tend\n\t\n\tdef isAvailable()\n\t\treturn @available\n\tend\n\t\n\tdef post(url, headers, body)\n\t\turi \u003d URI.parse(url)\n\t\t$logger.debug(\"Preparing to post to #{uri}\")\n\t\thttps \u003d Net::HTTP.new(uri.host, uri.port)\n\t\thttps.verify_mode \u003d OpenSSL::SSL::VERIFY_NONE\n\t\thttps.use_ssl\u003dtrue\n\t\tbegin\n\t\t\trequest \u003d Net::HTTP::Post.new(uri.request_uri, headers)\n\t\t\trequest.body \u003d body\n\t\t\tresponse \u003d https.request(request)\n\t\t\t$logger.trace(\"Call to #{url} returned #{response.code}.\")\n\t\t\tif response.body !\u003d nil\n\t\t\t\tbegin\n\t\t\t\t\treturn JSON.parse(response.body)\n\t\t\t\trescue\n\t\t\t\t\t$logger.warn(\"Unable to parse response from translation service or it\u0027s blank.\")\n\t\t\t\tend\n\t\t\tend\n\t\trescue \u003d\u003e ex\n\t\t\t$logger.warn(ex.message)\n\t\t\t$logger.warn(ex.backtrace.to_s)\n\t\tend\n\tend\n\t\n\t\n\tdef waitForTask(task_id)\n\t\ttask_status\u003d$nlpClient.getTaskStatus(task_id)\n\t\t\n\t\tif(!(task_status.has_key? \"response\"))\n\t\t\t$logger.warn(\"Type 1 wait failure:#{task_status.to_json}\")\n\t\t\traise \"Expected a \u0027response\u0027 element in the JSON but didn\u0027t find one.\"\n\t\tend\n\t\tif(!(task_status[\"response\"].has_key? \"status\"))\n\t\t\t$logger.warn(\"Type 2 wait failure:#{task_status[\"response\"].to_json}\")\n\t\t\traise \"Expected a \u0027status\u0027 element in the JSON but didn\u0027t find one.\"\n\t\tend\n\t\tif(!(task_status[\"response\"].has_key? \"result\"))\n\t\t\t$logger.warn(\"Type 3 wait failure:#{task_status[\"response\"].to_json}\")\n\t\t\traise \"Expected a \u0027result\u0027 element in the JSON but didn\u0027t find one.\"\n\t\tend\n\t\t\n\t\t\n\t\tstatus \u003d task_status[\"response\"][\"status\"]\n\t\t\n\n\t\t$logger.debug(\"Status: #{status}\")\n\t\tresult\u003dnil\n\t\tkillswitch \u003d 0\n\t\twhile status \u003d\u003d \"Running\"\n\t\t\tsleep 2\n\t\t\tkillswitch \u003d killswitch + 1\n\t\t\ttask_status\u003d$nlpClient.getTaskStatus(task_id)\n\t\t\n\t\t\tstatus \u003d task_status[\"response\"][\"status\"]\n\t\t\tif(!(task_status[\"response\"][\"result\"].nil?))\n\t\t\t\tif(task_status[\"response\"][\"result\"].has_key? \"result\")\n\t\t\t\t\tresult \u003d task_status[\"response\"][\"result\"][\"result\"]\n\t\t\t\telse\n\t\t\t\t\t$logger.warn(\"Type 4 wait warning:#{task_status[\"response\"].to_json}\")\n\t\t\t\t\traise \"Expected a \u0027result/result\u0027 element in the JSON but didn\u0027t find one.\"\n\t\t\t\tend\n\t\t\tend\n\n\t\t\t$logger.debug(\"Status: #{status}\")\n\t\t\tif(killswitch \u003e 10)\n\t\t\t\traise StandardError.new \"Waiting for Task has timed out.\"\n\t\t\tend\n\t\tend\n\t\taddMetadata(\"gracie-status\", status, \"text\", \"user\")\n\t\t#addCustomMetadata(\"gracie-result\", result, \"text\", \"user\")\n\t\t\n\t\t#in my testing this happens in two scenarios, inadequate text OR too much noise.\n\t\tif((status\u003d\u003d\u0027Completed\u0027) \u0026\u0026 (result.nil?))\n\t\t\treturn nil\n\t\tend\n\t\t\n\t\tif(!(result.has_key? \"seSearchResult\"))\n\t\t\t$logger.warn(task_status[\"response\"].to_json)\n\t\t\t$logger.warn(\"\u003d\u003d\u003d\u003d\u003d\")\n\t\t\t$logger.warn(result.to_json)\n\t\t\traise \"Expected a \u0027seSearchResult\u0027 element in the JSON but didn\u0027t find one.\"\n\t\tend\n\t\tif(result[\"seSearchResult\"].nil?)\n\t\t\t$logger.warn(task_status[\"response\"].to_json)\n\t\t\t$logger.warn(\"\u003d\u003d\u003d\u003d\u003d\")\n\t\t\t$logger.warn(result.to_json)\n\t\t\traise \"Expected a \u0027seSearchResult\u0027 element in the JSON but didn\u0027t find anything there\"\n\t\tend\n\t\treturn result[\"seSearchResult\"]\n\tend\n\t\nend\n\ndef initNLP(workerItem)\n\tif($nlpClient.nil?)\n\t\t# Read from the config file in the case directory.\n\t\t# Allows for headless, i.e. Nuix Automation!\n\t\tcaseRoot\u003dworkerItem.getWorkerStoreDir().getParent().getParent().to_s\n\t\tconfigPath\u003dcaseRoot + \"/config_nlp.config.json\"\n\t\tcfg\u003dJSON.parse(File.read(configPath))\n\t\t$nlpClient\u003dGracie.new(cfg)\n\tend\nend\n\n\ndef nuix_worker_item_callback_init()\n\t# to not break existing GUI implementation\n\tcfg\u003d{}\n\t\n\tif(!(cfg\u003d\u003d{}))\n\t\t$nlpClient\u003dGracie.new(cfg)\n\tend\nend\n\ndef nuix_worker_item_callback(worker_item)\n\tbegin\n\t\n\t\t# Init is only called if gracie isn\u0027t already available. This is for configuration read from a case directory (Nuix Automation)\n\t\tinitNLP(worker_item)\n\t\t$nlpClient.applyWorkerItem(worker_item)\n\t\tif(!($nlpClient.isAvailable()))\n\t\t\traise StandardError.new \"#0 Can\u0027t connect to Gracie\"\n\t\tend\n\t\t\n\t\tsource_item \u003d worker_item.source_item\n\t\t$logger.trace(\"WSS Callback fired for #{source_item.name} (guid:#{worker_item.get_item_guid})\")\n\t\tsourceText\u003dsource_item.getText()\n\t\tif(sourceText.isAvailable())\n\t\t\titem_text \u003d sourceText.toString()\n\t\t\tif !item_text.nil? \u0026\u0026 !item_text.empty?\n\t\t\t\t$logger.debug(\"Asking my girl Gracie about this #{source_item.type.name} named \u0027#{source_item.name}\u0027.\")\n\t\t\t\ttask_id \u003d $nlpClient.createTask(item_text)\n\t\t\t\t$logger.info(\"Submitted text processing task. (Task ID: #{task_id})\")\n\n\t\t\t\tseSearchResult\u003d$nlpClient.waitForTask(task_id)\n\t\t\t\tif(!(seSearchResult.nil?))\n\t\t\t\t\t$nlpClient.focusOnResult(seSearchResult)\n\t\t\t\tend\n\t\t\tend\n\t\t\n\t\telse\n\t\t\t$logger.warn(\"Source Item Text is not available:#{worker_item.getGuid()}\")\n\t\tend\n\trescue \u003d\u003e ex\n\t\tworker_item.addTag(\"NLP|ERROR\") # This isn\u0027t going through gracie client to ensure these are tagged regardless of config\n\t\t$logger.warn(ex.message)\n\t\tworker_item.addTag(\"NLP|ERROR|#{ex.message}\")\n\t\t$logger.warn(ex.backtrace.to_s)\n\t\t$nlpClient.addMetadata(\"gracie-error-message\", ex.message, \"text\", \"user\")\n\t\t$nlpClient.addMetadata(\"gracie-error-backtrace\", ex.backtrace, \"text\", \"user\")\n\tend\nend\n\ndef nuix_worker_item_callback_close()\n\tbegin\n\t\tif(!($nlpClient.nil?))\n\t\t\tcleanup \u003d $nlpClient.cleanUp()\n\t\t\t$logger.info(\"Deleted project #{cleanup[\"response\"][\"name\"]}.\")\n\t\tend\n\trescue \u003d\u003e ex\n\t\t$logger.warn(ex.message)\n\t\t$logger.warn(ex.backtrace.to_s)\n\tend\nend","logName":"script"}]}]]></worker-script-settings>
    <processing-settings-software-version>9.6.5.283</processing-settings-software-version>
    <calculate-ss-deep-fuzzy-hash>false</calculate-ss-deep-fuzzy-hash>
    <calculate-photo-dna-robust-hash>false</calculate-photo-dna-robust-hash>
    <classify-images-with-deep-learning>false</classify-images-with-deep-learning>
    <populate-graph-database>false</populate-graph-database>
    <default-imaging-profile-name>Default</default-imaging-profile-name>
    <perform-ocr>false</perform-ocr>
    <ocr-profile-name>Default</ocr-profile-name>
    <export-metadata>false</export-metadata>
  </data-processing-settings>
  <data-settings>
    <software-version>9.7.0.600</software-version>
    <extract-from-slack-space>false</extract-from-slack-space>
    <carve-file-system-unallocated-space>false</carve-file-system-unallocated-space>
    <carve-unidentified-data>false</carve-unidentified-data>
    <extract-end-of-file-slack-space>false</extract-end-of-file-slack-space>
    <smart-process-registry>true</smart-process-registry>
    <recover-deleted-files>true</recover-deleted-files>
    <expose-binary-data-for-directories>false</expose-binary-data-for-directories>
    <direct-access-to-mailboxes>false</direct-access-to-mailboxes>
    <render-dpi>100</render-dpi>
    <identify-physical-files>true</identify-physical-files>
    <add-bcc-to-email-digest>false</add-bcc-to-email-digest>
    <add-communication-date-to-email-digest>false</add-communication-date-to-email-digest>
    <disabled-mime-types>
      <disabled-mime-type>APPLICATION_VND_SYMANTEC_VAULT_STREAM_DATA</disabled-mime-type>
    </disabled-mime-types>
  </data-settings>
  <parallel-processing-settings>
    <run-local-workers>false</run-local-workers>
    <worker-count>2</worker-count>
    <worker-memory>2304</worker-memory>
    <embed-broker>true</embed-broker>
    <broker-memory>4096</broker-memory>
    <worker-temp-directory>C:\temp</worker-temp-directory>
    <user-defined-temp-directory>true</user-defined-temp-directory>
  </parallel-processing-settings>
  <case-evidence-settings>
    <text-index-settings>
      <analysis-language>ENGLISH</analysis-language>
      <stop-words-enabled>false</stop-words-enabled>
      <stemming-enabled>false</stemming-enabled>
    </text-index-settings>
  </case-evidence-settings>
  <password-discovery-settings>
    <mode>NONE</mode>
  </password-discovery-settings>
  <keys-location>C:\Users\cstiller01\AppData\Roaming\Nuix\Processing Profiles</keys-location>
</processing-profile>
